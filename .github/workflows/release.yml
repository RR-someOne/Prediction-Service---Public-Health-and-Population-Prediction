name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  JAVA_VERSION: '17'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build all services
        run: |
          cd java-backend
          ./mvnw clean package -DskipTests

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            All microservices are available as Docker images:
            - `ghcr.io/${{ github.repository }}/eureka-server:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/api-gateway:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/config-server:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/population-health-trends:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/disease-outbreak-modeling:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/demographic-forecasting:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/resource-planning:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/risk-assessment:${{ github.ref_name }}`
            
            ## Deployment
            
            Use the provided Kubernetes manifests or Docker Compose files to deploy this release.
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [
          'eureka-server', 
          'api-gateway', 
          'config-server',
          'population-health-trends',
          'disease-outbreak-modeling',
          'demographic-forecasting',
          'resource-planning',
          'risk-assessment'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build JAR for ${{ matrix.service }}
        run: |
          cd java-backend
          ./mvnw clean package -pl ${{ matrix.service }} -am -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: java-backend/${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ steps.extract_tag.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-release-images
    environment:
      name: production
      url: https://prediction-service.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production cluster
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # kubectl apply -f kubernetes/production/